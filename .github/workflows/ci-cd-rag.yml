name: CI/CD RAG Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-rag-semantic:
    runs-on: ubuntu-latest
    
    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov scikit-learn numpy
    
    - name: Wait for ChromaDB to be ready
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8000/api/v1/heartbeat > /dev/null 2>&1; then
            echo "ChromaDB is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "ChromaDB failed to start within 30 seconds"
            exit 1
          fi
          sleep 2
        done
    
    - name: Run RAG semantic similarity tests
      env:
        CHROMADB_HOST: localhost
        CHROMADB_PORT: 8000
      run: |
        pytest tests/test_rag_semantic.py -v --tb=short
    
    - name: Test RAG system integration
      env:
        CHROMADB_HOST: localhost
        CHROMADB_PORT: 8000
      run: |
        python -c "
        from rag.retrieval import RAGRetriever
        from rag.embeddings import EmbeddingPipeline
        
        # Test RAG system initialization
        rag = RAGRetriever(environment='test')
        health = rag.health_check()
        assert health['chromadb'], 'ChromaDB should be healthy'
        assert health['embedding_model'], 'Embedding model should be healthy'
        
        # Test embedding pipeline
        embedder = EmbeddingPipeline()
        embeddings = embedder.encode(['test sentence'])
        assert len(embeddings[0]) > 0, 'Should generate embeddings'
        
        print('RAG system integration test passed!')
        "
    
    - name: Test semantic similarity threshold
      run: |
        python -c "
        from rag.embeddings import EmbeddingPipeline
        
        embedder = EmbeddingPipeline()
        
        # Test similar governance texts
        text1 = 'A DAO should allocate treasury funds with community oversight and transparency.'
        text2 = 'DAOs must allocate treasury resources with community supervision and openness.'
        
        emb1 = embedder.encode_single(text1)
        emb2 = embedder.encode_single(text2)
        similarity = embedder.compute_similarity(emb1, emb2)
        
        print(f'Similarity score: {similarity:.3f}')
        assert similarity >= 0.80, f'Similarity {similarity:.3f} below threshold 0.80'
        
        print('Semantic similarity threshold test passed!')
        "

  build-and-deploy:
    needs: test-rag-semantic
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and test Docker image
      run: |
        docker build -t ashoka-rag-test .
        
        # Test that the image can start ChromaDB
        docker run --rm -d --name ashoka-test -p 5000:5000 -p 8000:8000 ashoka-rag-test &
        CONTAINER_ID=$!
        
        # Wait for services to start
        sleep 30
        
        # Test ChromaDB health
        curl -f http://localhost:8000/api/v1/heartbeat || exit 1
        
        # Test Flask API health
        curl -f http://localhost:5000/health || exit 1
        
        # Test RAG health endpoint
        curl -f http://localhost:5000/api/rag-health || exit 1
        
        # Cleanup
        docker stop ashoka-test || true
    
    - name: Build and push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/ashoka:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/ashoka:rag-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying Ashoka RAG system to staging environment..."
        echo "Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/ashoka:rag-${{ github.sha }}"
        echo "Deployment would include:"
        echo "- ChromaDB persistent volume mount"
        echo "- Environment separation (test vs prod collections)"
        echo "- Health checks for both Flask API and ChromaDB"
        echo "- RAG system initialization with governance documents"
