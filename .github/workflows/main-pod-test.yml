name: Main Pod Test

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push to Docker Hub"]
    types:
      - completed
    branches:
      - main

jobs:
  test-main-pod:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    env:
      RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
      BOOTUP_TIMEOUT_SEC: 600

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests runpod

      - name: Get pod URL and run remote CI tests
        run: |
          ./pod_manager.py main restart --deploy-new-if-needed --verbose

          POD_URL=$(./pod_manager.py main status --verbose 2>&1 | grep "Server Host:" | awk '{print "https://" $3}' || echo "")
          if [ -z "$POD_URL" ]; then
            echo "‚ùå Could not determine pod URL"
            exit 1
          fi
          echo "üîç Testing pod at: $POD_URL"
          
          ./scripts/health_check.sh $BOOTUP_TIMEOUT_SEC "$POD_URL"
          
          # Start remote CI test
          echo "üöÄ Starting remote CI tests..."
          TEST_RESPONSE=$(curl -s -X POST "$POD_URL/start-test")
          echo "üîç Test response: $TEST_RESPONSE"
          
          # Parse test ID with error handling
          TEST_ID=$(echo "$TEST_RESPONSE" | python3 -c "
          import sys, json
          try:
              data = json.load(sys.stdin)
              print(data['test_id'])
          except Exception as e:
              print(f'Error parsing JSON: {e}', file=sys.stderr)
              sys.exit(1)
          ")
          echo "üìã Test ID: $TEST_ID"
          
          # Poll for test completion
          echo "‚è≥ Polling for test completion..."
          MAX_WAIT=600  # 10 minutes max
          ELAPSED=0
          POLL_INTERVAL=15
          
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            sleep $POLL_INTERVAL
            ELAPSED=$((ELAPSED + POLL_INTERVAL))
            
            STATUS_RESPONSE=$(curl -s "$POD_URL/test-status/$TEST_ID")
            echo "üîç Status response: $STATUS_RESPONSE"
            
            # Parse status with error handling
            STATUS=$(echo "$STATUS_RESPONSE" | python3 -c "
            import sys, json
            try:
                data = json.load(sys.stdin)
                print(data['status'])
            except Exception as e:
                print(f'Error parsing status JSON: {e}', file=sys.stderr)
                print('failed')  # Default to failed on parse error
            ")
            
            echo "üìä Test status after ${ELAPSED}s: $STATUS"
            
            if [ "$STATUS" = "success" ]; then
              echo "‚úÖ Tests passed!"
              echo "üìÑ Test output:"
              echo "$STATUS_RESPONSE" | python3 -c "
            import sys, json
            try:
                data = json.load(sys.stdin)
                print(data.get('output', 'No output available'))
            except Exception as e:
                print(f'Error parsing output JSON: {e}', file=sys.stderr)
                print('Could not parse test output')
            "
              exit 0
            elif [ "$STATUS" = "failed" ]; then
              echo "‚ùå Tests failed!"
              echo "üìÑ Test output:"
              echo "$STATUS_RESPONSE" | python3 -c "
            import sys, json
            try:
                data = json.load(sys.stdin)
                print(data.get('output', 'No output available'))
            except Exception as e:
                print(f'Error parsing output JSON: {e}', file=sys.stderr)
                print('Could not parse test output')
            "
              exit 1
            fi
          done
          
          echo "‚è∞ Tests timed out after $MAX_WAIT seconds"
          exit 1
